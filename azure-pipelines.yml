name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDnpQEG+ho+UxVXmfvgmwlVwx6Gp6Pb5vYqfyZkSY/n+wikUfEhL+n5UICiOhPIsw4HUNmjcne3+8AF9gFUbGRYPy03f9gIbRdU0HMi7Ti+VJuZFJnyLgfE7QVUVpCBJoW4DoJ50ORs1q9p2UO6u3MhU4iysKj0RvZYZwCtQXrCYgTjsM3R0ikRhIWUGtc1fQ/Hc0Z7cWlHaw8Uv74jlinw/ragmAkfOqi7ujHAUl/KSw7EkBG+Vy+H4aM6zEgBIAjBh2v6X/YA7SbUpLoFIOXopsZ0ExNDQ8z8sAtODBfh8sn5ykXmue1z3Ns8cJDYYTucAV897O76DiYwpdtIAMesxA3mhVhYS9O3huXHGpn5ocqm38Lq7ldiMO7Py+NpIflfD0vYNPMflX6/pvoxBaw+IyhjlYEXQ1k5zLbpU3YTcXGcFCfBviM1uRWTpyldoH/o5KtPezjmHLPGPNNnX0QW7dandriWtIFoDWnB/s9C9ZMmue+YnvISCOw9WhVu06k= toshiba@LAPTOP-39PEF594'
        sshKeySecureFile: 'id_rsa'
    - bash: |
        cp $(tfvardef.secureFilePath) $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform.tfvars
    - task: TerraformInstaller@0
      displayName: install Terraform v0.15.4
      inputs:
        terraformVersion: '0.15.4'
    - task: Bash@3
      displayName: terraform init
      inputs:
        targetType: 'inline'
        script: terraform init
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: Bash@3
      displayName: terraform apply
      inputs:
        targetType: 'inline'
        script: terraform apply -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Automatedtesting'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/automatedtesting-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish AutomatedTesting Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/automatedtesting-$(Build.BuildId).zip'
        artifactName: 'automatedtesting-artifact'
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'service-connection-ib'
              appName: 'ensuring-quality-releases-repo-appservice'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: 'Install Tools'
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
      tags: TEST
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get install software-properties-common -y
                sudo apt-add-repository universe -y
                sudo apt-get upgrade -y
                sudo apt-get install -y libglib2.0-0
                sudo apt-get install -y libnss3
                sudo apt-get install -y libgconf-2-4
                sudo apt-get install -y libfontconfig1
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get update
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install selenium
                sudo apt install -y default-jre
                java -version
                python3 --version
                chromium-browser --version
                chromedriver --version
                #export PATH=$PATH:some/path
- stage: Test
  jobs:
  - job: Postman
    pool:
        name: Hosted Ubuntu 1604
    steps:
      - task: CmdLine@2
        displayName: Install newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: Run newman
        continueOnError: true
        inputs:
          script: 'newman run postman.json \
                   -e postman-vars.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/postman-result.xml \
                   --suppress-exit-code'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
